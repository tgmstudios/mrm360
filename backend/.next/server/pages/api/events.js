"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/events";
exports.ids = ["pages/api/events"];
exports.modules = {

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "bullmq":
/*!*************************!*\
  !*** external "bullmq" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("bullmq");

/***/ }),

/***/ "ioredis":
/*!**************************!*\
  !*** external "ioredis" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("ioredis");

/***/ }),

/***/ "jsonwebtoken":
/*!*******************************!*\
  !*** external "jsonwebtoken" ***!
  \*******************************/
/***/ ((module) => {

module.exports = require("jsonwebtoken");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "zod":
/*!**********************!*\
  !*** external "zod" ***!
  \**********************/
/***/ ((module) => {

module.exports = import("zod");;

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fevents&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fevents%2Findex.ts&middlewareConfigBase64=e30%3D!":
/*!********************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fevents&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fevents%2Findex.ts&middlewareConfigBase64=e30%3D! ***!
  \********************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _src_pages_api_events_index_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/pages/api/events/index.ts */ \"(api)/./src/pages/api/events/index.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_src_pages_api_events_index_ts__WEBPACK_IMPORTED_MODULE_3__]);\n_src_pages_api_events_index_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_src_pages_api_events_index_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_src_pages_api_events_index_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/events\",\n        pathname: \"/api/events\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _src_pages_api_events_index_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmV2ZW50cyZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnNyYyUyRnBhZ2VzJTJGYXBpJTJGZXZlbnRzJTJGaW5kZXgudHMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ0w7QUFDMUQ7QUFDNEQ7QUFDNUQ7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLDJEQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQywyREFBUTtBQUNwQztBQUNPLHdCQUF3QixnSEFBbUI7QUFDbEQ7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQscUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tcm0zNjAtYmFja2VuZC8/OTk5YiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vc3JjL3BhZ2VzL2FwaS9ldmVudHMvaW5kZXgudHNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgXCJkZWZhdWx0XCIpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgXCJjb25maWdcIik7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9ldmVudHNcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9ldmVudHNcIixcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBhcmVuJ3QgdXNlZCBpbiBwcm9kdWN0aW9uLlxuICAgICAgICBidW5kbGVQYXRoOiBcIlwiLFxuICAgICAgICBmaWxlbmFtZTogXCJcIlxuICAgIH0sXG4gICAgdXNlcmxhbmRcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlcy1hcGkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fevents&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fevents%2Findex.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./src/managers/backgroundTaskManager.ts":
/*!***********************************************!*\
  !*** ./src/managers/backgroundTaskManager.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BackgroundTaskManager: () => (/* binding */ BackgroundTaskManager)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/utils/logger */ \"(api)/./src/utils/logger.ts\");\n\n\nclass BackgroundTaskManager {\n    constructor(prisma){\n        this.prisma = prisma;\n    }\n    async createTask(params) {\n        const { name, description, entityType, entityId, subtaskNames = [] } = params;\n        try {\n            const task = await this.prisma.backgroundTask.create({\n                data: {\n                    name,\n                    description,\n                    entityType,\n                    entityId,\n                    status: _prisma_client__WEBPACK_IMPORTED_MODULE_0__.TaskStatus.PENDING,\n                    progress: 0,\n                    subtasks: {\n                        create: subtaskNames.map((n, idx)=>({\n                                name: n,\n                                stepIndex: idx,\n                                status: _prisma_client__WEBPACK_IMPORTED_MODULE_0__.TaskStatus.PENDING,\n                                progress: 0\n                            }))\n                    }\n                },\n                include: {\n                    subtasks: true\n                }\n            });\n            _utils_logger__WEBPACK_IMPORTED_MODULE_1__.logger.info(\"Background task created\", {\n                taskId: task.id,\n                name\n            });\n            return task;\n        } catch (error) {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_1__.logger.error(\"Failed to create background task\", {\n                error,\n                name\n            });\n            throw error;\n        }\n    }\n    async markTaskRunning(taskId) {\n        await this.prisma.backgroundTask.update({\n            where: {\n                id: taskId\n            },\n            data: {\n                status: _prisma_client__WEBPACK_IMPORTED_MODULE_0__.TaskStatus.RUNNING,\n                startedAt: new Date()\n            }\n        });\n    }\n    async updateTaskProgress(taskId, progress) {\n        await this.prisma.backgroundTask.update({\n            where: {\n                id: taskId\n            },\n            data: {\n                progress\n            }\n        });\n    }\n    async markTaskCompleted(taskId, result) {\n        await this.prisma.backgroundTask.update({\n            where: {\n                id: taskId\n            },\n            data: {\n                status: _prisma_client__WEBPACK_IMPORTED_MODULE_0__.TaskStatus.COMPLETED,\n                finishedAt: new Date(),\n                progress: 100,\n                result\n            }\n        });\n    }\n    async markTaskFailed(taskId, errorMessage) {\n        await this.prisma.backgroundTask.update({\n            where: {\n                id: taskId\n            },\n            data: {\n                status: _prisma_client__WEBPACK_IMPORTED_MODULE_0__.TaskStatus.FAILED,\n                finishedAt: new Date(),\n                error: errorMessage\n            }\n        });\n    }\n    async markSubtaskRunning(taskId, stepIndex) {\n        const subtask = await this.prisma.backgroundSubtask.update({\n            where: {\n                id: await this.getSubtaskId(taskId, stepIndex)\n            },\n            data: {\n                status: _prisma_client__WEBPACK_IMPORTED_MODULE_0__.TaskStatus.RUNNING,\n                startedAt: new Date(),\n                progress: 0\n            }\n        });\n        return subtask;\n    }\n    async updateSubtaskProgress(taskId, stepIndex, progress) {\n        await this.prisma.backgroundSubtask.update({\n            where: {\n                id: await this.getSubtaskId(taskId, stepIndex)\n            },\n            data: {\n                progress\n            }\n        });\n    }\n    async markSubtaskCompleted(taskId, stepIndex, result) {\n        await this.prisma.backgroundSubtask.update({\n            where: {\n                id: await this.getSubtaskId(taskId, stepIndex)\n            },\n            data: {\n                status: _prisma_client__WEBPACK_IMPORTED_MODULE_0__.TaskStatus.COMPLETED,\n                finishedAt: new Date(),\n                progress: 100,\n                result\n            }\n        });\n    }\n    async markSubtaskFailed(taskId, stepIndex, errorMessage) {\n        await this.prisma.backgroundSubtask.update({\n            where: {\n                id: await this.getSubtaskId(taskId, stepIndex)\n            },\n            data: {\n                status: _prisma_client__WEBPACK_IMPORTED_MODULE_0__.TaskStatus.FAILED,\n                finishedAt: new Date(),\n                error: errorMessage\n            }\n        });\n    }\n    async getTask(taskId) {\n        return this.prisma.backgroundTask.findUnique({\n            where: {\n                id: taskId\n            },\n            include: {\n                subtasks: true\n            }\n        });\n    }\n    async listTasks(params = {}) {\n        const page = params.page || 1;\n        const limit = params.limit || 20;\n        const skip = (page - 1) * limit;\n        const where = {};\n        if (params.entityType) where.entityType = params.entityType;\n        if (params.entityId) where.entityId = params.entityId;\n        const [total, tasks] = await Promise.all([\n            this.prisma.backgroundTask.count({\n                where\n            }),\n            this.prisma.backgroundTask.findMany({\n                where,\n                orderBy: {\n                    createdAt: \"desc\"\n                },\n                skip,\n                take: limit,\n                include: {\n                    subtasks: true\n                }\n            })\n        ]);\n        return {\n            data: tasks,\n            pagination: {\n                page,\n                limit,\n                total,\n                totalPages: Math.ceil(total / limit)\n            }\n        };\n    }\n    async getSubtaskId(taskId, stepIndex) {\n        const subtask = await this.prisma.backgroundSubtask.findFirst({\n            where: {\n                taskId,\n                stepIndex\n            }\n        });\n        if (!subtask) {\n            throw new Error(`Subtask not found for task ${taskId} at step ${stepIndex}`);\n        }\n        return subtask.id;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/managers/backgroundTaskManager.ts\n");

/***/ }),

/***/ "(api)/./src/managers/eventManager.ts":
/*!**************************************!*\
  !*** ./src/managers/eventManager.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EventManager: () => (/* binding */ EventManager)\n/* harmony export */ });\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/logger */ \"(api)/./src/utils/logger.ts\");\n\nclass EventManager {\n    constructor(prisma){\n        this.prisma = prisma;\n    }\n    async createEvent(data) {\n        try {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Creating new event\", {\n                title: data.title,\n                category: data.category\n            });\n            const event = await this.prisma.event.create({\n                data: {\n                    title: data.title,\n                    description: data.description,\n                    startTime: data.startTime,\n                    endTime: data.endTime,\n                    category: data.category,\n                    linkedTeamId: data.linkedTeamId,\n                    attendanceType: data.attendanceType\n                },\n                include: {\n                    linkedTeam: true,\n                    rsvps: {\n                        include: {\n                            user: true\n                        }\n                    },\n                    checkIns: {\n                        include: {\n                            user: true\n                        }\n                    }\n                }\n            });\n            _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Event created successfully\", {\n                eventId: event.id\n            });\n            return event;\n        } catch (error) {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Failed to create event\", {\n                error,\n                data\n            });\n            throw error;\n        }\n    }\n    async getEventById(id) {\n        try {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Fetching event by ID\", {\n                eventId: id\n            });\n            const event = await this.prisma.event.findUnique({\n                where: {\n                    id\n                },\n                include: {\n                    linkedTeam: true,\n                    rsvps: {\n                        include: {\n                            user: true\n                        }\n                    },\n                    checkIns: {\n                        include: {\n                            user: true\n                        }\n                    }\n                }\n            });\n            return event;\n        } catch (error) {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Failed to fetch event by ID\", {\n                error,\n                eventId: id\n            });\n            throw error;\n        }\n    }\n    async getAllEvents(filters) {\n        try {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Fetching all events\", {\n                filters\n            });\n            const where = {};\n            if (filters?.category) {\n                where.category = filters.category;\n            }\n            if (filters?.linkedTeamId) {\n                where.linkedTeamId = filters.linkedTeamId;\n            }\n            if (filters?.startDate || filters?.endDate) {\n                where.startTime = {};\n                if (filters.startDate) {\n                    where.startTime.gte = filters.startDate;\n                }\n                if (filters.endDate) {\n                    where.startTime.lte = filters.endDate;\n                }\n            }\n            const events = await this.prisma.event.findMany({\n                where,\n                include: {\n                    linkedTeam: true,\n                    rsvps: {\n                        include: {\n                            user: true\n                        }\n                    },\n                    checkIns: {\n                        include: {\n                            user: true\n                        }\n                    }\n                },\n                orderBy: {\n                    startTime: \"asc\"\n                }\n            });\n            return events;\n        } catch (error) {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Failed to fetch events\", {\n                error,\n                filters\n            });\n            throw error;\n        }\n    }\n    async updateEvent(id, data) {\n        try {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Updating event\", {\n                eventId: id,\n                updates: data\n            });\n            const event = await this.prisma.event.update({\n                where: {\n                    id\n                },\n                data,\n                include: {\n                    linkedTeam: true,\n                    rsvps: {\n                        include: {\n                            user: true\n                        }\n                    },\n                    checkIns: {\n                        include: {\n                            user: true\n                        }\n                    }\n                }\n            });\n            _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Event updated successfully\", {\n                eventId: id\n            });\n            return event;\n        } catch (error) {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Failed to update event\", {\n                error,\n                eventId: id,\n                data\n            });\n            throw error;\n        }\n    }\n    async deleteEvent(id) {\n        try {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Deleting event\", {\n                eventId: id\n            });\n            // Delete related records first\n            await this.prisma.eventAttendance.deleteMany({\n                where: {\n                    eventId: id\n                }\n            });\n            await this.prisma.event.delete({\n                where: {\n                    id\n                }\n            });\n            _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Event deleted successfully\", {\n                eventId: id\n            });\n        } catch (error) {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Failed to delete event\", {\n                error,\n                eventId: id\n            });\n            throw error;\n        }\n    }\n    async rsvpToEvent(data) {\n        try {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Processing RSVP\", {\n                userId: data.userId,\n                eventId: data.eventId,\n                status: data.status\n            });\n            // Check if user is already RSVP'd\n            const existingRSVP = await this.prisma.eventAttendance.findUnique({\n                where: {\n                    userId_eventId: {\n                        userId: data.userId,\n                        eventId: data.eventId\n                    }\n                }\n            });\n            if (existingRSVP) {\n                // Update existing RSVP\n                await this.prisma.eventAttendance.update({\n                    where: {\n                        userId_eventId: {\n                            userId: data.userId,\n                            eventId: data.eventId\n                        }\n                    },\n                    data: {\n                        status: data.status,\n                        updatedAt: new Date()\n                    }\n                });\n            } else {\n                // Create new RSVP\n                await this.prisma.eventAttendance.create({\n                    data: {\n                        userId: data.userId,\n                        eventId: data.eventId,\n                        status: data.status\n                    }\n                });\n            }\n            _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"RSVP processed successfully\", {\n                userId: data.userId,\n                eventId: data.eventId\n            });\n        } catch (error) {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Failed to process RSVP\", {\n                error,\n                data\n            });\n            throw error;\n        }\n    }\n    async checkInAttendance(data) {\n        try {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Processing attendance check-in\", {\n                qrCode: data.qrCode,\n                eventId: data.eventId\n            });\n            // Find user by QR code\n            const user = await this.prisma.user.findFirst({\n                where: {\n                    qrCode: data.qrCode\n                }\n            });\n            if (!user) {\n                _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.warn(\"User not found for QR code\", {\n                    qrCode: data.qrCode\n                });\n                return {\n                    success: false,\n                    message: \"Invalid QR code\"\n                };\n            }\n            // Check if event exists\n            const event = await this.prisma.event.findUnique({\n                where: {\n                    id: data.eventId\n                }\n            });\n            if (!event) {\n                _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.warn(\"Event not found\", {\n                    eventId: data.eventId\n                });\n                return {\n                    success: false,\n                    message: \"Event not found\"\n                };\n            }\n            // Check if user is RSVP'd\n            const rsvp = await this.prisma.eventAttendance.findUnique({\n                where: {\n                    userId_eventId: {\n                        userId: user.id,\n                        eventId: data.eventId\n                    }\n                }\n            });\n            if (!rsvp || rsvp.status !== \"attending\") {\n                _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.warn(\"User not RSVP'd as attending\", {\n                    userId: user.id,\n                    eventId: data.eventId\n                });\n                return {\n                    success: false,\n                    message: \"User not RSVP'd as attending\"\n                };\n            }\n            // Update attendance record\n            await this.prisma.eventAttendance.update({\n                where: {\n                    userId_eventId: {\n                        userId: user.id,\n                        eventId: data.eventId\n                    }\n                },\n                data: {\n                    checkedIn: true,\n                    checkInTime: new Date()\n                }\n            });\n            _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Attendance check-in successful\", {\n                userId: user.id,\n                eventId: data.eventId\n            });\n            return {\n                success: true,\n                message: \"Check-in successful\",\n                user\n            };\n        } catch (error) {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Failed to process attendance check-in\", {\n                error,\n                data\n            });\n            throw error;\n        }\n    }\n    async getEventAttendance(eventId) {\n        try {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Fetching event attendance\", {\n                eventId\n            });\n            const attendance = await this.prisma.eventAttendance.findMany({\n                where: {\n                    eventId\n                },\n                include: {\n                    user: {\n                        select: {\n                            id: true,\n                            name: true,\n                            email: true,\n                            qrCode: true\n                        }\n                    }\n                },\n                orderBy: {\n                    createdAt: \"asc\"\n                }\n            });\n            return attendance;\n        } catch (error) {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Failed to fetch event attendance\", {\n                error,\n                eventId\n            });\n            throw error;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/managers/eventManager.ts\n");

/***/ }),

/***/ "(api)/./src/managers/taskManager.ts":
/*!*************************************!*\
  !*** ./src/managers/taskManager.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TaskManager: () => (/* binding */ TaskManager)\n/* harmony export */ });\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/logger */ \"(api)/./src/utils/logger.ts\");\n/* harmony import */ var _tasks_queue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tasks/queue */ \"(api)/./src/tasks/queue.ts\");\n/* harmony import */ var _models_prismaClient__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/models/prismaClient */ \"(api)/./src/models/prismaClient.ts\");\n/* harmony import */ var _backgroundTaskManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./backgroundTaskManager */ \"(api)/./src/managers/backgroundTaskManager.ts\");\n\n\n\n\nclass TaskManager {\n    constructor(){\n        this.emailQueue = _tasks_queue__WEBPACK_IMPORTED_MODULE_1__.emailQueue;\n        this.qrCodeQueue = _tasks_queue__WEBPACK_IMPORTED_MODULE_1__.qrCodeQueue;\n        this.syncGroupsQueue = _tasks_queue__WEBPACK_IMPORTED_MODULE_1__.syncGroupsQueue;\n        this.provisionQueue = _tasks_queue__WEBPACK_IMPORTED_MODULE_1__.provisionQueue;\n    }\n    async enqueueEmailJob(data, options) {\n        try {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Enqueueing email job\", {\n                to: data.to,\n                subject: data.subject\n            });\n            const job = await this.emailQueue.add(\"send-email\", data, {\n                delay: options?.delay || 0,\n                priority: options?.priority || 0,\n                attempts: options?.attempts || 3,\n                backoff: {\n                    type: \"exponential\",\n                    delay: 2000\n                }\n            });\n            _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Email job enqueued successfully\", {\n                jobId: job.id\n            });\n            return job.id;\n        } catch (error) {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Failed to enqueue email job\", {\n                error,\n                data\n            });\n            throw error;\n        }\n    }\n    // High-level provisioning tasks that create DB task + enqueue provision job\n    async enqueueProvisionTask(params) {\n        const backgroundTaskManager = new _backgroundTaskManager__WEBPACK_IMPORTED_MODULE_3__.BackgroundTaskManager(_models_prismaClient__WEBPACK_IMPORTED_MODULE_2__.prisma);\n        const backgroundTask = await backgroundTaskManager.createTask({\n            name: params.name,\n            description: params.description,\n            entityType: params.entityType,\n            entityId: params.entityId,\n            subtaskNames: params.subtaskNames\n        });\n        const job = await this.provisionQueue.add(\"provision\", {\n            backgroundTaskId: backgroundTask.id,\n            provisionType: params.provisionType,\n            payload: params.payload\n        });\n        return {\n            jobId: job.id,\n            backgroundTaskId: backgroundTask.id\n        };\n    }\n    async enqueueQRCodeJob(data, options) {\n        try {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Enqueueing QR code generation job\", {\n                userId: data.userId\n            });\n            const job = await this.qrCodeQueue.add(\"generate-qr-code\", data, {\n                delay: options?.delay || 0,\n                priority: options?.priority || 0,\n                attempts: options?.attempts || 3,\n                backoff: {\n                    type: \"exponential\",\n                    delay: 2000\n                }\n            });\n            _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"QR code job enqueued successfully\", {\n                jobId: job.id\n            });\n            return job.id;\n        } catch (error) {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Failed to enqueue QR code job\", {\n                error,\n                data\n            });\n            throw error;\n        }\n    }\n    async enqueueSyncGroupsJob(data, options) {\n        try {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Enqueueing sync groups job\", {\n                userId: data.userId,\n                force: data.force\n            });\n            const job = await this.syncGroupsQueue.add(\"sync-groups\", data, {\n                delay: options?.delay || 0,\n                priority: options?.priority || 0,\n                attempts: options?.attempts || 3,\n                backoff: {\n                    type: \"exponential\",\n                    delay: 5000\n                }\n            });\n            _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Sync groups job enqueued successfully\", {\n                jobId: job.id\n            });\n            return job.id;\n        } catch (error) {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Failed to enqueue sync groups job\", {\n                error,\n                data\n            });\n            throw error;\n        }\n    }\n    async getJobStatus(queueName, jobId) {\n        try {\n            let queue;\n            switch(queueName){\n                case \"email\":\n                    queue = this.emailQueue;\n                    break;\n                case \"qr-code\":\n                    queue = this.qrCodeQueue;\n                    break;\n                case \"sync-groups\":\n                    queue = this.syncGroupsQueue;\n                    break;\n                default:\n                    throw new Error(`Unknown queue: ${queueName}`);\n            }\n            const job = await queue.getJob(jobId);\n            if (!job) {\n                return {\n                    status: \"not_found\"\n                };\n            }\n            const state = await job.getState();\n            const progress = await job.progress();\n            const failedReason = job.failedReason;\n            return {\n                id: job.id,\n                name: job.name,\n                status: state,\n                progress,\n                failedReason,\n                data: job.data,\n                createdAt: job.timestamp,\n                processedAt: job.processedOn,\n                finishedAt: job.finishedOn\n            };\n        } catch (error) {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Failed to get job status\", {\n                error,\n                queueName,\n                jobId\n            });\n            throw error;\n        }\n    }\n    async getQueueStats(queueName) {\n        try {\n            let queue;\n            switch(queueName){\n                case \"email\":\n                    queue = this.emailQueue;\n                    break;\n                case \"qr-code\":\n                    queue = this.qrCodeQueue;\n                    break;\n                case \"sync-groups\":\n                    queue = this.syncGroupsQueue;\n                    break;\n                default:\n                    throw new Error(`Unknown queue: ${queueName}`);\n            }\n            const [waiting, active, completed, failed, delayed] = await Promise.all([\n                queue.getWaiting(),\n                queue.getActive(),\n                queue.getCompleted(),\n                queue.getFailed(),\n                queue.getDelayed()\n            ]);\n            return {\n                waiting: waiting.length,\n                active: active.length,\n                completed: completed.length,\n                failed: failed.length,\n                delayed: delayed.length,\n                total: waiting.length + active.length + completed.length + failed.length + delayed.length\n            };\n        } catch (error) {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Failed to get queue stats\", {\n                error,\n                queueName\n            });\n            throw error;\n        }\n    }\n    async retryFailedJob(queueName, jobId) {\n        try {\n            let queue;\n            switch(queueName){\n                case \"email\":\n                    queue = this.emailQueue;\n                    break;\n                case \"qr-code\":\n                    queue = this.qrCodeQueue;\n                    break;\n                case \"sync-groups\":\n                    queue = this.syncGroupsQueue;\n                    break;\n                default:\n                    throw new Error(`Unknown queue: ${queueName}`);\n            }\n            const job = await queue.getJob(jobId);\n            if (!job) {\n                throw new Error(\"Job not found\");\n            }\n            await job.retry();\n            _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Job retry initiated\", {\n                queueName,\n                jobId\n            });\n        } catch (error) {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Failed to retry job\", {\n                error,\n                queueName,\n                jobId\n            });\n            throw error;\n        }\n    }\n    async clearCompletedJobs(queueName) {\n        try {\n            let queue;\n            switch(queueName){\n                case \"email\":\n                    queue = this.emailQueue;\n                    break;\n                case \"qr-code\":\n                    queue = this.qrCodeQueue;\n                    break;\n                case \"sync-groups\":\n                    queue = this.syncGroupsQueue;\n                    break;\n                default:\n                    throw new Error(`Unknown queue: ${queueName}`);\n            }\n            await queue.clean(0, 1000, \"completed\");\n            _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Completed jobs cleared\", {\n                queueName\n            });\n        } catch (error) {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Failed to clear completed jobs\", {\n                error,\n                queueName\n            });\n            throw error;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/managers/taskManager.ts\n");

/***/ }),

/***/ "(api)/./src/middleware/authMiddleware.ts":
/*!******************************************!*\
  !*** ./src/middleware/authMiddleware.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   withAuth: () => (/* binding */ withAuth)\n/* harmony export */ });\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jsonwebtoken */ \"jsonwebtoken\");\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jsonwebtoken__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _models_prismaClient__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/prismaClient */ \"(api)/./src/models/prismaClient.ts\");\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/logger */ \"(api)/./src/utils/logger.ts\");\n\n\n\n// Helper function to determine effective role based on OIDC groups\nfunction getEffectiveRole(userRole, authentikGroups) {\n    // If user has tech-team group, elevate to admin regardless of base role\n    if (authentikGroups.includes(\"tech-team\")) {\n        _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.info(\"User has tech-team group, elevating to admin role\", {\n            originalRole: userRole,\n            authentikGroups\n        });\n        return \"ADMIN\";\n    }\n    return userRole;\n}\nfunction withAuth(handler) {\n    return async (req, res)=>{\n        try {\n            // Get JWT token from Authorization header\n            const authHeader = req.headers.authorization;\n            if (!authHeader || !authHeader.startsWith(\"Bearer \")) {\n                _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.warn(\"No valid authorization header\", {\n                    path: req.url\n                });\n                return res.status(401).json({\n                    error: \"Unauthorized\",\n                    message: \"No valid token provided\"\n                });\n            }\n            const token = authHeader.substring(7); // Remove 'Bearer ' prefix\n            // Verify JWT token\n            let decoded;\n            try {\n                decoded = jsonwebtoken__WEBPACK_IMPORTED_MODULE_0___default().verify(token, process.env.JWT_SECRET || \"fallback-secret\");\n            } catch (error) {\n                _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.warn(\"Invalid JWT token\", {\n                    error,\n                    path: req.url\n                });\n                return res.status(401).json({\n                    error: \"Unauthorized\",\n                    message: \"Invalid token\"\n                });\n            }\n            if (!decoded || !decoded.id) {\n                _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.warn(\"Invalid token payload\", {\n                    path: req.url\n                });\n                return res.status(401).json({\n                    error: \"Unauthorized\",\n                    message: \"Invalid token payload\"\n                });\n            }\n            // Get fresh user data from database\n            const user = await _models_prismaClient__WEBPACK_IMPORTED_MODULE_1__.prisma.user.findUnique({\n                where: {\n                    id: decoded.id\n                },\n                select: {\n                    id: true,\n                    email: true,\n                    username: true,\n                    firstName: true,\n                    lastName: true,\n                    role: true\n                }\n            });\n            if (!user) {\n                _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.warn(\"User not found\", {\n                    userId: decoded.id,\n                    path: req.url\n                });\n                return res.status(401).json({\n                    error: \"Unauthorized\",\n                    message: \"User not found\"\n                });\n            }\n            // Get user groups\n            const userGroups = await _models_prismaClient__WEBPACK_IMPORTED_MODULE_1__.prisma.userGroup.findMany({\n                where: {\n                    userId: user.id\n                },\n                include: {\n                    group: {\n                        select: {\n                            name: true\n                        }\n                    }\n                }\n            });\n            // Create authenticated request with user info\n            const authenticatedReq = req;\n            authenticatedReq.user = {\n                id: user.id,\n                email: user.email,\n                username: user.username || undefined,\n                firstName: user.firstName,\n                lastName: user.lastName,\n                role: getEffectiveRole(user.role, userGroups.map((ug)=>ug.group.name)),\n                groups: userGroups.map((ug)=>ug.group.name)\n            };\n            _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.info(\"Authentication successful\", {\n                userId: user.id,\n                userRole: authenticatedReq.user.role,\n                path: req.url\n            });\n            // Call the original handler\n            await handler(authenticatedReq, res);\n        } catch (error) {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Authentication middleware error\", {\n                error,\n                path: req.url\n            });\n            return res.status(500).json({\n                error: \"Internal server error\",\n                message: \"Authentication failed\"\n            });\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/middleware/authMiddleware.ts\n");

/***/ }),

/***/ "(api)/./src/middleware/corsMiddleware.ts":
/*!******************************************!*\
  !*** ./src/middleware/corsMiddleware.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   withCORS: () => (/* binding */ withCORS)\n/* harmony export */ });\nfunction withCORS(handler) {\n    return async (req, res)=>{\n        // Set CORS headers\n        const allowedOrigin = process.env.FRONTEND_URL || \"http://localhost:3011\";\n        res.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n        res.setHeader(\"Access-Control-Allow-Origin\", allowedOrigin);\n        res.setHeader(\"Access-Control-Allow-Methods\", \"GET,OPTIONS,PATCH,DELETE,POST,PUT\");\n        res.setHeader(\"Access-Control-Allow-Headers\", \"X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version, Authorization\");\n        // Handle preflight request\n        if (req.method === \"OPTIONS\") {\n            res.status(200).end();\n            return;\n        }\n        // Call the original handler\n        await handler(req, res);\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvbWlkZGxld2FyZS9jb3JzTWlkZGxld2FyZS50cyIsIm1hcHBpbmdzIjoiOzs7O0FBRU8sU0FBU0EsU0FBU0MsT0FBcUU7SUFDNUYsT0FBTyxPQUFPQyxLQUFxQkM7UUFDakMsbUJBQW1CO1FBQ25CLE1BQU1DLGdCQUFnQkMsUUFBUUMsR0FBRyxDQUFDQyxZQUFZLElBQUk7UUFFbERKLElBQUlLLFNBQVMsQ0FBQyxvQ0FBb0M7UUFDbERMLElBQUlLLFNBQVMsQ0FBQywrQkFBK0JKO1FBQzdDRCxJQUFJSyxTQUFTLENBQUMsZ0NBQWdDO1FBQzlDTCxJQUFJSyxTQUFTLENBQUMsZ0NBQWdDO1FBRTlDLDJCQUEyQjtRQUMzQixJQUFJTixJQUFJTyxNQUFNLEtBQUssV0FBVztZQUM1Qk4sSUFBSU8sTUFBTSxDQUFDLEtBQUtDLEdBQUc7WUFDbkI7UUFDRjtRQUVBLDRCQUE0QjtRQUM1QixNQUFNVixRQUFRQyxLQUFLQztJQUNyQjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXJtMzYwLWJhY2tlbmQvLi9zcmMvbWlkZGxld2FyZS9jb3JzTWlkZGxld2FyZS50cz8zYjljIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRBcGlSZXF1ZXN0LCBOZXh0QXBpUmVzcG9uc2UgfSBmcm9tICduZXh0JztcblxuZXhwb3J0IGZ1bmN0aW9uIHdpdGhDT1JTKGhhbmRsZXI6IChyZXE6IE5leHRBcGlSZXF1ZXN0LCByZXM6IE5leHRBcGlSZXNwb25zZSkgPT4gUHJvbWlzZTx2b2lkPikge1xuICByZXR1cm4gYXN5bmMgKHJlcTogTmV4dEFwaVJlcXVlc3QsIHJlczogTmV4dEFwaVJlc3BvbnNlKSA9PiB7XG4gICAgLy8gU2V0IENPUlMgaGVhZGVyc1xuICAgIGNvbnN0IGFsbG93ZWRPcmlnaW4gPSBwcm9jZXNzLmVudi5GUk9OVEVORF9VUkwgfHwgJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAxMSc7XG4gICAgXG4gICAgcmVzLnNldEhlYWRlcignQWNjZXNzLUNvbnRyb2wtQWxsb3ctQ3JlZGVudGlhbHMnLCAndHJ1ZScpO1xuICAgIHJlcy5zZXRIZWFkZXIoJ0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbicsIGFsbG93ZWRPcmlnaW4pO1xuICAgIHJlcy5zZXRIZWFkZXIoJ0FjY2Vzcy1Db250cm9sLUFsbG93LU1ldGhvZHMnLCAnR0VULE9QVElPTlMsUEFUQ0gsREVMRVRFLFBPU1QsUFVUJyk7XG4gICAgcmVzLnNldEhlYWRlcignQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVycycsICdYLUNTUkYtVG9rZW4sIFgtUmVxdWVzdGVkLVdpdGgsIEFjY2VwdCwgQWNjZXB0LVZlcnNpb24sIENvbnRlbnQtTGVuZ3RoLCBDb250ZW50LU1ENSwgQ29udGVudC1UeXBlLCBEYXRlLCBYLUFwaS1WZXJzaW9uLCBBdXRob3JpemF0aW9uJyk7XG5cbiAgICAvLyBIYW5kbGUgcHJlZmxpZ2h0IHJlcXVlc3RcbiAgICBpZiAocmVxLm1ldGhvZCA9PT0gJ09QVElPTlMnKSB7XG4gICAgICByZXMuc3RhdHVzKDIwMCkuZW5kKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gQ2FsbCB0aGUgb3JpZ2luYWwgaGFuZGxlclxuICAgIGF3YWl0IGhhbmRsZXIocmVxLCByZXMpO1xuICB9O1xufVxuIl0sIm5hbWVzIjpbIndpdGhDT1JTIiwiaGFuZGxlciIsInJlcSIsInJlcyIsImFsbG93ZWRPcmlnaW4iLCJwcm9jZXNzIiwiZW52IiwiRlJPTlRFTkRfVVJMIiwic2V0SGVhZGVyIiwibWV0aG9kIiwic3RhdHVzIiwiZW5kIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./src/middleware/corsMiddleware.ts\n");

/***/ }),

/***/ "(api)/./src/middleware/permissionMiddleware.ts":
/*!************************************************!*\
  !*** ./src/middleware/permissionMiddleware.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   withPermissions: () => (/* binding */ withPermissions)\n/* harmony export */ });\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/logger */ \"(api)/./src/utils/logger.ts\");\n\nfunction withPermissions(handler, requiredPermissions) {\n    return async (req, res)=>{\n        try {\n            // Cast to PermissionRequest since this middleware should be used after withAuth\n            const permissionReq = req;\n            if (!permissionReq.user) {\n                _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.warn(\"Permission check attempted without authentication\", {\n                    path: req.url,\n                    method: req.method\n                });\n                return res.status(401).json({\n                    error: \"Unauthorized\",\n                    message: \"Authentication required\"\n                });\n            }\n            // Get required permissions (either static array or dynamic function)\n            const permissions = typeof requiredPermissions === \"function\" ? requiredPermissions(req) : requiredPermissions;\n            // Check if user has required permissions\n            const hasPermission = await checkPermissions(permissionReq.user, permissions);\n            if (!hasPermission) {\n                _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.warn(\"Insufficient permissions\", {\n                    userId: permissionReq.user.id,\n                    userRole: permissionReq.user.role,\n                    requiredPermissions: permissions,\n                    path: req.url\n                });\n                return res.status(403).json({\n                    error: \"Forbidden\",\n                    message: \"Insufficient permissions for this operation\"\n                });\n            }\n            _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"Permission check passed\", {\n                userId: permissionReq.user.id,\n                requiredPermissions: permissions,\n                path: req.url\n            });\n            // Call the original handler\n            await handler(permissionReq, res);\n        } catch (error) {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.error(\"Permission middleware error\", {\n                error,\n                path: req.url\n            });\n            return res.status(500).json({\n                error: \"Internal server error\",\n                message: \"Permission check failed\"\n            });\n        }\n    };\n}\nasync function checkPermissions(user, requiredPermissions) {\n    // For now, implement a simple role-based permission system\n    // This can be enhanced later with a more sophisticated permission system\n    const rolePermissions = {\n        \"ADMIN\": [\n            \"users:read\",\n            \"users:create\",\n            \"users:update\",\n            \"users:delete\",\n            \"groups:read\",\n            \"groups:create\",\n            \"groups:update\",\n            \"groups:delete\",\n            \"events:read\",\n            \"events:create\",\n            \"events:update\",\n            \"events:delete\",\n            \"teams:read\",\n            \"teams:create\",\n            \"teams:update\",\n            \"teams:delete\",\n            \"tasks:read\",\n            \"tasks:create\",\n            \"tasks:update\",\n            \"tasks:delete\"\n        ],\n        \"EXEC_BOARD\": [\n            \"users:read\",\n            \"users:create\",\n            \"users:update\",\n            \"groups:read\",\n            \"groups:create\",\n            \"groups:update\",\n            \"events:read\",\n            \"events:create\",\n            \"events:update\",\n            \"teams:read\",\n            \"teams:create\",\n            \"teams:update\",\n            \"tasks:read\",\n            \"tasks:create\",\n            \"tasks:update\"\n        ],\n        \"MEMBER\": [\n            \"users:read\",\n            \"groups:read\",\n            \"events:read\",\n            \"teams:read\",\n            \"tasks:read\"\n        ]\n    };\n    // Check if user has tech-team group in authentikGroups (OIDC groups)\n    // If they do, give them admin permissions regardless of their role\n    let effectiveRole = user.role;\n    if (user.authentikGroups && Array.isArray(user.authentikGroups)) {\n        if (user.authentikGroups.includes(\"tech-team\")) {\n            effectiveRole = \"ADMIN\";\n            _utils_logger__WEBPACK_IMPORTED_MODULE_0__.logger.info(\"User has tech-team group, elevating to admin permissions\", {\n                userId: user.id,\n                originalRole: user.role,\n                authentikGroups: user.authentikGroups\n            });\n        }\n    }\n    const userPermissions = rolePermissions[effectiveRole] || [];\n    // Check if user has all required permissions\n    return requiredPermissions.every((permission)=>userPermissions.includes(permission));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/middleware/permissionMiddleware.ts\n");

/***/ }),

/***/ "(api)/./src/models/prismaClient.ts":
/*!************************************!*\
  !*** ./src/models/prismaClient.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n\nconst prisma = globalThis.__prisma || new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient({\n    log:  true ? [\n        \"query\",\n        \"error\",\n        \"warn\"\n    ] : 0\n});\nif (true) {\n    globalThis.__prisma = prisma;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (prisma);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvbW9kZWxzL3ByaXNtYUNsaWVudC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQThDO0FBTXZDLE1BQU1DLFNBQVNDLFdBQVdDLFFBQVEsSUFBSSxJQUFJSCx3REFBWUEsQ0FBQztJQUM1REksS0FBS0MsS0FBeUIsR0FBZ0I7UUFBQztRQUFTO1FBQVM7S0FBTyxHQUFHLENBQVM7QUFDdEYsR0FBRztBQUVILElBQUlBLElBQXlCLEVBQWM7SUFDekNILFdBQVdDLFFBQVEsR0FBR0Y7QUFDeEI7QUFFQSxpRUFBZUEsTUFBTUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL21ybTM2MC1iYWNrZW5kLy4vc3JjL21vZGVscy9wcmlzbWFDbGllbnQudHM/N2M1MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcmlzbWFDbGllbnQgfSBmcm9tICdAcHJpc21hL2NsaWVudCc7XHJcblxyXG5kZWNsYXJlIGdsb2JhbCB7XHJcbiAgdmFyIF9fcHJpc21hOiBQcmlzbWFDbGllbnQgfCB1bmRlZmluZWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBwcmlzbWEgPSBnbG9iYWxUaGlzLl9fcHJpc21hIHx8IG5ldyBQcmlzbWFDbGllbnQoe1xyXG4gIGxvZzogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgPyBbJ3F1ZXJ5JywgJ2Vycm9yJywgJ3dhcm4nXSA6IFsnZXJyb3InXSxcclxufSk7XHJcblxyXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xyXG4gIGdsb2JhbFRoaXMuX19wcmlzbWEgPSBwcmlzbWE7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHByaXNtYTtcclxuIl0sIm5hbWVzIjpbIlByaXNtYUNsaWVudCIsInByaXNtYSIsImdsb2JhbFRoaXMiLCJfX3ByaXNtYSIsImxvZyIsInByb2Nlc3MiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/models/prismaClient.ts\n");

/***/ }),

/***/ "(api)/./src/pages/api/events/index.ts":
/*!***************************************!*\
  !*** ./src/pages/api/events/index.ts ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"zod\");\n/* harmony import */ var _models_prismaClient__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../models/prismaClient */ \"(api)/./src/models/prismaClient.ts\");\n/* harmony import */ var _managers_eventManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../managers/eventManager */ \"(api)/./src/managers/eventManager.ts\");\n/* harmony import */ var _managers_taskManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/managers/taskManager */ \"(api)/./src/managers/taskManager.ts\");\n/* harmony import */ var _middleware_corsMiddleware__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../middleware/corsMiddleware */ \"(api)/./src/middleware/corsMiddleware.ts\");\n/* harmony import */ var _middleware_authMiddleware__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../middleware/authMiddleware */ \"(api)/./src/middleware/authMiddleware.ts\");\n/* harmony import */ var _middleware_permissionMiddleware__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../middleware/permissionMiddleware */ \"(api)/./src/middleware/permissionMiddleware.ts\");\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../utils/logger */ \"(api)/./src/utils/logger.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([zod__WEBPACK_IMPORTED_MODULE_0__]);\nzod__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n\n\n\n\n// Validation schemas\nconst createEventSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    title: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1).max(200),\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    startTime: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().transform((val)=>new Date(val)),\n    endTime: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().transform((val)=>new Date(val)),\n    category: zod__WEBPACK_IMPORTED_MODULE_0__.z.enum([\n        \"MEETING\",\n        \"COMPETITION\",\n        \"WORKSHOP\",\n        \"SOCIAL\",\n        \"TRAINING\"\n    ]),\n    linkedTeamId: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    attendanceType: zod__WEBPACK_IMPORTED_MODULE_0__.z.enum([\n        \"STRICT\",\n        \"SOFT\"\n    ])\n});\nconst listEventsSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    page: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional().transform((val)=>parseInt(val || \"1\")),\n    limit: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional().transform((val)=>parseInt(val || \"20\")),\n    search: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    category: zod__WEBPACK_IMPORTED_MODULE_0__.z.enum([\n        \"MEETING\",\n        \"COMPETITION\",\n        \"WORKSHOP\",\n        \"SOCIAL\",\n        \"TRAINING\"\n    ]).optional(),\n    linkedTeamId: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    startDate: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional().transform((val)=>val ? new Date(val) : undefined),\n    endDate: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional().transform((val)=>val ? new Date(val) : undefined)\n});\n/**\n * @swagger\n * /api/events:\n *   get:\n *     summary: List events with filtering and pagination\n *     tags: [Events]\n *     security:\n *       - sessionAuth: []\n *     parameters:\n *       - in: query\n *         name: page\n *         schema:\n *           type: integer\n *           default: 1\n *         description: Page number for pagination\n *       - in: query\n *         name: limit\n *         schema:\n *           type: integer\n *           default: 20\n *         description: Number of events per page\n *       - in: query\n *         name: search\n *         schema:\n *           type: string\n *         description: Search term for event title\n *       - in: query\n *         name: category\n *         schema:\n *           type: string\n *           enum: [MEETING, COMPETITION, WORKSHOP, SOCIAL, OTHER]\n *         description: Filter by event category\n *       - in: query\n *         name: linkedTeamId\n *         schema:\n *           type: string\n *         description: Filter by linked team\n *       - in: query\n *         name: startDate\n *         schema:\n *           type: string\n *           format: date\n *         description: Filter events starting from this date\n *       - in: query\n *         name: endDate\n *         schema:\n *           type: string\n *           format: date\n *         description: Filter events starting before this date\n *     responses:\n *       200:\n *         description: List of events\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 events:\n *                   type: array\n *                   items:\n *                     $ref: '#/components/schemas/Event'\n *                 pagination:\n *                   type: object\n *                   properties:\n *                     page:\n *                       type: integer\n *                     limit:\n *                       type: integer\n *                     total:\n *                       type: integer\n *                     totalPages:\n *                       type: integer\n *       401:\n *         description: Unauthorized\n *       403:\n *         description: Forbidden - insufficient permissions\n *       500:\n *         description: Internal server error\n *   post:\n *     summary: Create a new event\n *     tags: [Events]\n *     security:\n *       - sessionAuth: []\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             required:\n *               - title\n *               - startTime\n *               - endTime\n *               - category\n *               - attendanceType\n *             properties:\n *               title:\n *                 type: string\n *                 minLength: 1\n *                 maxLength: 200\n *               description:\n *                 type: string\n *               startTime:\n *                 type: string\n *                 format: date-time\n *               endTime:\n *                 type: string\n *                 format: date-time\n *               category:\n *                 type: string\n *                 enum: [MEETING, COMPETITION, WORKSHOP, SOCIAL, OTHER]\n *               linkedTeamId:\n *                 type: string\n *               attendanceType:\n *                 type: string\n *                 enum: [STRICT, SOFT]\n *     responses:\n *       201:\n *         description: Event created successfully\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Event'\n *       400:\n *         description: Bad request - validation error\n *       401:\n *         description: Unauthorized\n *       403:\n *         description: Forbidden - insufficient permissions\n *       500:\n *         description: Internal server error\n */ async function handler(req, res) {\n    const eventManager = new _managers_eventManager__WEBPACK_IMPORTED_MODULE_2__.EventManager(_models_prismaClient__WEBPACK_IMPORTED_MODULE_1__.prisma);\n    const taskManager = new _managers_taskManager__WEBPACK_IMPORTED_MODULE_3__.TaskManager();\n    try {\n        if (req.method === \"GET\") {\n            // List events\n            const queryParams = listEventsSchema.parse(req.query);\n            const result = await eventManager.getAllEvents({\n                category: queryParams.category,\n                linkedTeamId: queryParams.linkedTeamId,\n                startDate: queryParams.startDate,\n                endDate: queryParams.endDate\n            });\n            // Simple pagination (in production, implement proper pagination)\n            const page = queryParams.page;\n            const limit = queryParams.limit;\n            const startIndex = (page - 1) * limit;\n            const endIndex = startIndex + limit;\n            const paginatedEvents = result.slice(startIndex, endIndex);\n            const total = result.length;\n            const totalPages = Math.ceil(total / limit);\n            res.status(200).json({\n                success: true,\n                data: paginatedEvents,\n                pagination: {\n                    page,\n                    limit,\n                    total,\n                    totalPages\n                }\n            });\n        } else if (req.method === \"POST\") {\n            // Create event\n            const body = createEventSchema.parse(req.body);\n            const event = await eventManager.createEvent(body);\n            // Enqueue simulated event setup task\n            const subtaskNames = [\n                \"Validate event details\",\n                \"Create internal records\",\n                \"Create Nextcloud calendar entry (simulated)\",\n                \"Generate RSVP link (simulated)\",\n                \"Prepare Wiretap/OpenStack resources (simulated)\"\n            ];\n            await taskManager.enqueueProvisionTask({\n                provisionType: \"EVENT\",\n                name: `Provision resources for event ${event.title}`,\n                description: \"Simulated event resource setup\",\n                entityType: \"EVENT\",\n                entityId: event.id,\n                subtaskNames,\n                payload: {\n                    eventId: event.id\n                }\n            });\n            res.status(201).json({\n                success: true,\n                data: event\n            });\n        } else {\n            res.status(405).json({\n                error: \"Method not allowed\"\n            });\n        }\n    } catch (error) {\n        if (error instanceof zod__WEBPACK_IMPORTED_MODULE_0__.z.ZodError) {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_7__.logger.warn(\"Validation error in events API\", {\n                errors: error.errors\n            });\n            return res.status(400).json({\n                error: \"Validation error\",\n                details: error.errors\n            });\n        }\n        _utils_logger__WEBPACK_IMPORTED_MODULE_7__.logger.error(\"Error in events API\", {\n            error,\n            method: req.method\n        });\n        res.status(500).json({\n            error: \"Internal server error\"\n        });\n    }\n}\n// Apply middleware: CORS, authentication then permissions\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_middleware_corsMiddleware__WEBPACK_IMPORTED_MODULE_4__.withCORS)((0,_middleware_authMiddleware__WEBPACK_IMPORTED_MODULE_5__.withAuth)((0,_middleware_permissionMiddleware__WEBPACK_IMPORTED_MODULE_6__.withPermissions)(handler, (req)=>{\n    // GET requests only need read permission, POST requests need create permission\n    if (req.method === \"GET\") {\n        return [\n            \"events:read\"\n        ];\n    } else if (req.method === \"POST\") {\n        return [\n            \"events:create\"\n        ];\n    }\n    return [];\n}))));\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/events/index.ts\n");

/***/ }),

/***/ "(api)/./src/tasks/queue.ts":
/*!****************************!*\
  !*** ./src/tasks/queue.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QUEUE_NAMES: () => (/* binding */ QUEUE_NAMES),\n/* harmony export */   addJobToQueue: () => (/* binding */ addJobToQueue),\n/* harmony export */   closeQueues: () => (/* binding */ closeQueues),\n/* harmony export */   emailQueue: () => (/* binding */ emailQueue),\n/* harmony export */   getQueueHealth: () => (/* binding */ getQueueHealth),\n/* harmony export */   provisionQueue: () => (/* binding */ provisionQueue),\n/* harmony export */   qrCodeQueue: () => (/* binding */ qrCodeQueue),\n/* harmony export */   syncGroupsQueue: () => (/* binding */ syncGroupsQueue)\n/* harmony export */ });\n/* harmony import */ var bullmq__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bullmq */ \"bullmq\");\n/* harmony import */ var bullmq__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bullmq__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var ioredis__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ioredis */ \"ioredis\");\n/* harmony import */ var ioredis__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(ioredis__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/utils/logger */ \"(api)/./src/utils/logger.ts\");\n\n\n\n// Redis connection\nconst redis = new (ioredis__WEBPACK_IMPORTED_MODULE_1___default())(process.env.REDIS_URL || \"redis://localhost:6379\");\n// Queue names\nconst QUEUE_NAMES = {\n    EMAIL: \"email\",\n    QR_CODE: \"qr-code\",\n    SYNC_GROUPS: \"sync-groups\",\n    PROVISION: \"provision\"\n};\n// Create queues\nconst emailQueue = new bullmq__WEBPACK_IMPORTED_MODULE_0__.Queue(QUEUE_NAMES.EMAIL, {\n    connection: redis,\n    defaultJobOptions: {\n        attempts: 3,\n        backoff: {\n            type: \"exponential\",\n            delay: 2000\n        }\n    }\n});\nconst qrCodeQueue = new bullmq__WEBPACK_IMPORTED_MODULE_0__.Queue(QUEUE_NAMES.QR_CODE, {\n    connection: redis,\n    defaultJobOptions: {\n        attempts: 2,\n        backoff: {\n            type: \"exponential\",\n            delay: 1000\n        }\n    }\n});\nconst syncGroupsQueue = new bullmq__WEBPACK_IMPORTED_MODULE_0__.Queue(QUEUE_NAMES.SYNC_GROUPS, {\n    connection: redis,\n    defaultJobOptions: {\n        attempts: 5,\n        backoff: {\n            type: \"exponential\",\n            delay: 5000\n        }\n    }\n});\nconst provisionQueue = new bullmq__WEBPACK_IMPORTED_MODULE_0__.Queue(QUEUE_NAMES.PROVISION, {\n    connection: redis,\n    defaultJobOptions: {\n        attempts: 1\n    }\n});\n// Note: Not using QueueScheduler due to BullMQ version constraints\n// Queue event handlers\nemailQueue.on(\"completed\", (job)=>{\n    _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.info(`Email job ${job.id} completed successfully`);\n});\nemailQueue.on(\"failed\", (job, err)=>{\n    _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(`Email job ${job.id} failed:`, err);\n});\nqrCodeQueue.on(\"completed\", (job)=>{\n    _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.info(`QR Code job ${job.id} completed successfully`);\n});\nqrCodeQueue.on(\"failed\", (job, err)=>{\n    _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(`QR Code job ${job.id} failed:`, err);\n});\nsyncGroupsQueue.on(\"completed\", (job)=>{\n    _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.info(`Sync Groups job ${job.id} completed successfully`);\n});\nsyncGroupsQueue.on(\"failed\", (job, err)=>{\n    _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(`Sync Groups job ${job.id} failed:`, err);\n});\nprovisionQueue.on(\"completed\", (job)=>{\n    _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.info(`Provision job ${job.id} completed successfully`);\n});\nprovisionQueue.on(\"failed\", (job, err)=>{\n    _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(`Provision job ${job.id} failed:`, err);\n});\n// Helper function to add jobs to queues\nasync function addJobToQueue(queueName, data, options) {\n    const queue = getQueueByName(queueName);\n    if (!queue) {\n        throw new Error(`Unknown queue: ${queueName}`);\n    }\n    const job = await queue.add(queueName, data, {\n        delay: options?.delay,\n        priority: options?.priority,\n        attempts: options?.attempts\n    });\n    _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.info(`Added job ${job.id} to ${queueName} queue`);\n    return job;\n}\nfunction getQueueByName(queueName) {\n    switch(queueName){\n        case \"EMAIL\":\n            return emailQueue;\n        case \"QR_CODE\":\n            return qrCodeQueue;\n        case \"SYNC_GROUPS\":\n            return syncGroupsQueue;\n        default:\n            return null;\n    }\n}\n// Graceful shutdown\nasync function closeQueues() {\n    await emailQueue.close();\n    await qrCodeQueue.close();\n    await syncGroupsQueue.close();\n    await redis.quit();\n    _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.info(\"All queues closed\");\n}\n// Health check\nasync function getQueueHealth() {\n    try {\n        await redis.ping();\n        return {\n            redis: \"healthy\",\n            queues: {\n                email: await emailQueue.getJobCounts(),\n                qrCode: await qrCodeQueue.getJobCounts(),\n                syncGroups: await syncGroupsQueue.getJobCounts()\n            }\n        };\n    } catch (error) {\n        _utils_logger__WEBPACK_IMPORTED_MODULE_2__.logger.error(\"Queue health check failed:\", error);\n        return {\n            redis: \"unhealthy\",\n            error: error instanceof Error ? error.message : \"Unknown error\"\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/tasks/queue.ts\n");

/***/ }),

/***/ "(api)/./src/utils/logger.ts":
/*!*****************************!*\
  !*** ./src/utils/logger.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LogLevel: () => (/* binding */ LogLevel),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   logger: () => (/* binding */ logger)\n/* harmony export */ });\nvar LogLevel;\n(function(LogLevel) {\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\n    LogLevel[LogLevel[\"INFO\"] = 1] = \"INFO\";\n    LogLevel[LogLevel[\"WARN\"] = 2] = \"WARN\";\n    LogLevel[LogLevel[\"ERROR\"] = 3] = \"ERROR\";\n})(LogLevel || (LogLevel = {}));\nclass Logger {\n    constructor(level = 1){\n        this.level = level;\n    }\n    formatMessage(level, message, meta) {\n        const timestamp = new Date().toISOString();\n        const metaStr = meta ? ` ${JSON.stringify(meta)}` : \"\";\n        return `[${timestamp}] ${level}: ${message}${metaStr}`;\n    }\n    log(level, levelName, message, meta) {\n        if (level >= this.level) {\n            const formattedMessage = this.formatMessage(levelName, message, meta);\n            switch(level){\n                case 3:\n                    console.error(formattedMessage);\n                    break;\n                case 2:\n                    console.warn(formattedMessage);\n                    break;\n                case 1:\n                    console.info(formattedMessage);\n                    break;\n                case 0:\n                    console.debug(formattedMessage);\n                    break;\n            }\n        }\n    }\n    debug(message, meta) {\n        this.log(0, \"DEBUG\", message, meta);\n    }\n    info(message, meta) {\n        this.log(1, \"INFO\", message, meta);\n    }\n    warn(message, meta) {\n        this.log(2, \"WARN\", message, meta);\n    }\n    error(message, meta) {\n        this.log(3, \"ERROR\", message, meta);\n    }\n    setLevel(level) {\n        this.level = level;\n    }\n}\nconst logger = new Logger( true ? 0 : 0);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (logger);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvdXRpbHMvbG9nZ2VyLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7VUFBWUE7Ozs7O0dBQUFBLGFBQUFBO0FBT1osTUFBTUM7SUFHSkMsWUFBWUMsU0FBK0IsQ0FBRTtRQUMzQyxJQUFJLENBQUNBLEtBQUssR0FBR0E7SUFDZjtJQUVRQyxjQUFjRCxLQUFhLEVBQUVFLE9BQWUsRUFBRUMsSUFBVSxFQUFVO1FBQ3hFLE1BQU1DLFlBQVksSUFBSUMsT0FBT0MsV0FBVztRQUN4QyxNQUFNQyxVQUFVSixPQUFPLENBQUMsQ0FBQyxFQUFFSyxLQUFLQyxTQUFTLENBQUNOLE1BQU0sQ0FBQyxHQUFHO1FBQ3BELE9BQU8sQ0FBQyxDQUFDLEVBQUVDLFVBQVUsRUFBRSxFQUFFSixNQUFNLEVBQUUsRUFBRUUsUUFBUSxFQUFFSyxRQUFRLENBQUM7SUFDeEQ7SUFFUUcsSUFBSVYsS0FBZSxFQUFFVyxTQUFpQixFQUFFVCxPQUFlLEVBQUVDLElBQVUsRUFBRTtRQUMzRSxJQUFJSCxTQUFTLElBQUksQ0FBQ0EsS0FBSyxFQUFFO1lBQ3ZCLE1BQU1ZLG1CQUFtQixJQUFJLENBQUNYLGFBQWEsQ0FBQ1UsV0FBV1QsU0FBU0M7WUFFaEUsT0FBUUg7Z0JBQ047b0JBQ0VhLFFBQVFDLEtBQUssQ0FBQ0Y7b0JBQ2Q7Z0JBQ0Y7b0JBQ0VDLFFBQVFFLElBQUksQ0FBQ0g7b0JBQ2I7Z0JBQ0Y7b0JBQ0VDLFFBQVFHLElBQUksQ0FBQ0o7b0JBQ2I7Z0JBQ0Y7b0JBQ0VDLFFBQVFJLEtBQUssQ0FBQ0w7b0JBQ2Q7WUFDSjtRQUNGO0lBQ0Y7SUFFQUssTUFBTWYsT0FBZSxFQUFFQyxJQUFVLEVBQUU7UUFDakMsSUFBSSxDQUFDTyxHQUFHLElBQWlCLFNBQVNSLFNBQVNDO0lBQzdDO0lBRUFhLEtBQUtkLE9BQWUsRUFBRUMsSUFBVSxFQUFFO1FBQ2hDLElBQUksQ0FBQ08sR0FBRyxJQUFnQixRQUFRUixTQUFTQztJQUMzQztJQUVBWSxLQUFLYixPQUFlLEVBQUVDLElBQVUsRUFBRTtRQUNoQyxJQUFJLENBQUNPLEdBQUcsSUFBZ0IsUUFBUVIsU0FBU0M7SUFDM0M7SUFFQVcsTUFBTVosT0FBZSxFQUFFQyxJQUFVLEVBQUU7UUFDakMsSUFBSSxDQUFDTyxHQUFHLElBQWlCLFNBQVNSLFNBQVNDO0lBQzdDO0lBRUFlLFNBQVNsQixLQUFlLEVBQUU7UUFDeEIsSUFBSSxDQUFDQSxLQUFLLEdBQUdBO0lBQ2Y7QUFDRjtBQUVPLE1BQU1tQixTQUFTLElBQUlyQixPQUN4QnNCLEtBQXlCLFVBQ3pCO0FBRUYsaUVBQWVELE1BQU1BLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tcm0zNjAtYmFja2VuZC8uL3NyYy91dGlscy9sb2dnZXIudHM/N2NmZiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZW51bSBMb2dMZXZlbCB7XHJcbiAgREVCVUcgPSAwLFxyXG4gIElORk8gPSAxLFxyXG4gIFdBUk4gPSAyLFxyXG4gIEVSUk9SID0gM1xyXG59XHJcblxyXG5jbGFzcyBMb2dnZXIge1xyXG4gIHByaXZhdGUgbGV2ZWw6IExvZ0xldmVsO1xyXG5cclxuICBjb25zdHJ1Y3RvcihsZXZlbDogTG9nTGV2ZWwgPSBMb2dMZXZlbC5JTkZPKSB7XHJcbiAgICB0aGlzLmxldmVsID0gbGV2ZWw7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGZvcm1hdE1lc3NhZ2UobGV2ZWw6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nLCBtZXRhPzogYW55KTogc3RyaW5nIHtcclxuICAgIGNvbnN0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcclxuICAgIGNvbnN0IG1ldGFTdHIgPSBtZXRhID8gYCAke0pTT04uc3RyaW5naWZ5KG1ldGEpfWAgOiAnJztcclxuICAgIHJldHVybiBgWyR7dGltZXN0YW1wfV0gJHtsZXZlbH06ICR7bWVzc2FnZX0ke21ldGFTdHJ9YDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgbG9nKGxldmVsOiBMb2dMZXZlbCwgbGV2ZWxOYW1lOiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZywgbWV0YT86IGFueSkge1xyXG4gICAgaWYgKGxldmVsID49IHRoaXMubGV2ZWwpIHtcclxuICAgICAgY29uc3QgZm9ybWF0dGVkTWVzc2FnZSA9IHRoaXMuZm9ybWF0TWVzc2FnZShsZXZlbE5hbWUsIG1lc3NhZ2UsIG1ldGEpO1xyXG4gICAgICBcclxuICAgICAgc3dpdGNoIChsZXZlbCkge1xyXG4gICAgICAgIGNhc2UgTG9nTGV2ZWwuRVJST1I6XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGZvcm1hdHRlZE1lc3NhZ2UpO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBMb2dMZXZlbC5XQVJOOlxyXG4gICAgICAgICAgY29uc29sZS53YXJuKGZvcm1hdHRlZE1lc3NhZ2UpO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBMb2dMZXZlbC5JTkZPOlxyXG4gICAgICAgICAgY29uc29sZS5pbmZvKGZvcm1hdHRlZE1lc3NhZ2UpO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBMb2dMZXZlbC5ERUJVRzpcclxuICAgICAgICAgIGNvbnNvbGUuZGVidWcoZm9ybWF0dGVkTWVzc2FnZSk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZGVidWcobWVzc2FnZTogc3RyaW5nLCBtZXRhPzogYW55KSB7XHJcbiAgICB0aGlzLmxvZyhMb2dMZXZlbC5ERUJVRywgJ0RFQlVHJywgbWVzc2FnZSwgbWV0YSk7XHJcbiAgfVxyXG5cclxuICBpbmZvKG1lc3NhZ2U6IHN0cmluZywgbWV0YT86IGFueSkge1xyXG4gICAgdGhpcy5sb2coTG9nTGV2ZWwuSU5GTywgJ0lORk8nLCBtZXNzYWdlLCBtZXRhKTtcclxuICB9XHJcblxyXG4gIHdhcm4obWVzc2FnZTogc3RyaW5nLCBtZXRhPzogYW55KSB7XHJcbiAgICB0aGlzLmxvZyhMb2dMZXZlbC5XQVJOLCAnV0FSTicsIG1lc3NhZ2UsIG1ldGEpO1xyXG4gIH1cclxuXHJcbiAgZXJyb3IobWVzc2FnZTogc3RyaW5nLCBtZXRhPzogYW55KSB7XHJcbiAgICB0aGlzLmxvZyhMb2dMZXZlbC5FUlJPUiwgJ0VSUk9SJywgbWVzc2FnZSwgbWV0YSk7XHJcbiAgfVxyXG5cclxuICBzZXRMZXZlbChsZXZlbDogTG9nTGV2ZWwpIHtcclxuICAgIHRoaXMubGV2ZWwgPSBsZXZlbDtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKFxyXG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnID8gTG9nTGV2ZWwuREVCVUcgOiBMb2dMZXZlbC5JTkZPXHJcbik7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBsb2dnZXI7XHJcbiJdLCJuYW1lcyI6WyJMb2dMZXZlbCIsIkxvZ2dlciIsImNvbnN0cnVjdG9yIiwibGV2ZWwiLCJmb3JtYXRNZXNzYWdlIiwibWVzc2FnZSIsIm1ldGEiLCJ0aW1lc3RhbXAiLCJEYXRlIiwidG9JU09TdHJpbmciLCJtZXRhU3RyIiwiSlNPTiIsInN0cmluZ2lmeSIsImxvZyIsImxldmVsTmFtZSIsImZvcm1hdHRlZE1lc3NhZ2UiLCJjb25zb2xlIiwiZXJyb3IiLCJ3YXJuIiwiaW5mbyIsImRlYnVnIiwic2V0TGV2ZWwiLCJsb2dnZXIiLCJwcm9jZXNzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./src/utils/logger.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fevents&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fevents%2Findex.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();